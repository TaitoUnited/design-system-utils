{"version":3,"sources":["../src/index.ts","../src/web.ts","../src/native.ts"],"sourcesContent":["export * as web from \"./web\";\nexport * as native from \"./native\";\n","export const todo = true;\n","const WEIGHT_TO_FONT = {\n  100: \"Thin\",\n  200: \"ExtraLight\",\n  300: \"Light\",\n  400: \"Regular\",\n  500: \"Medium\",\n  600: \"SemiBold\",\n  700: \"Bold\",\n  800: \"ExtraBold\",\n  900: \"Black\",\n} as const;\n\nexport function getFontFromWeight(weight: number) {\n  return WEIGHT_TO_FONT[weight as FontWeightNum].toLowerCase() as FontWeightVar;\n}\n\nexport function getFonts<T extends Record<string, TypographyDefinition>>(t: T) {\n  const fonts = {} as Record<FontWeightVar, string>;\n\n  Object.values(t).forEach((token) => {\n    const suffix = WEIGHT_TO_FONT[token.fontWeight as FontWeightNum];\n    const name = suffix.toLowerCase() as FontWeightVar;\n    fonts[name] = `${token.fontFamily}-${suffix}`;\n  });\n\n  return fonts;\n}\n\nexport function getFontSizes<T extends Record<string, TypographyDefinition>>(\n  t: T\n) {\n  const fontSizes = {} as Record<keyof T, number>;\n\n  Object.entries(t).forEach(([key, value]) => {\n    fontSizes[key as keyof T] = value.fontSize;\n  });\n\n  return fontSizes;\n}\n\nexport function getFontWeights<T extends Record<string, TypographyDefinition>>(\n  t: T\n) {\n  const fontWeights = {} as Record<keyof T, string>;\n\n  Object.entries(t).forEach(([key, value]) => {\n    fontWeights[key as keyof T] = `${value.fontWeight}`;\n  });\n\n  return fontWeights;\n}\n\nexport function getLineHeights<T extends Record<string, TypographyDefinition>>(\n  t: T\n) {\n  const lineHeights = {} as Record<keyof T, number>;\n\n  Object.entries(t).forEach(([key, value]) => {\n    lineHeights[key as keyof T] = value.lineHeight * value.fontSize;\n  });\n\n  return lineHeights;\n}\n\nexport function getLetterSpacings<\n  T extends Record<string, TypographyDefinition>\n>(t: T) {\n  const letterSpacings = {} as Record<keyof T, number>;\n\n  Object.entries(t).forEach(([key, value]) => {\n    letterSpacings[key as keyof T] = value.letterSpacing;\n  });\n\n  return letterSpacings;\n}\n\nconst ANDROID_ELEVATIONS = [0, 1, 2, 4, 6, 8, 12, 16, 24];\n\nexport function getElevation(shadowRadius: number) {\n  // Find closest elevation\n  const elevation = ANDROID_ELEVATIONS.reduce((prev, curr) => {\n    return Math.abs(curr - shadowRadius) < Math.abs(prev - shadowRadius)\n      ? curr\n      : prev;\n  }, 0);\n\n  return elevation;\n}\n\nexport function getShadows<\n  T extends Record<string, ShadowDefinition>,\n  K extends Extract<keyof T, string>\n>(t: T) {\n  const shadows = {} as Record<ShadowName<K>, ShadowOutput>;\n\n  Object.entries(t).forEach(([key, value]) => {\n    const k = key.replace(\"shadow\", \"\").toLowerCase() as ShadowName<K>;\n\n    shadows[k] = {\n      elevation: getElevation(value.radius),\n      shadowOffset: { width: value.offset.x, height: value.offset.y },\n      shadowRadius: value.radius,\n      shadowOpacity: value.opacity,\n      shadowColor: value.color.hex,\n    };\n  });\n\n  return shadows;\n}\n\n// Types ----------------------------------------------------------------------\n\nexport type TypographyDefinition = {\n  fontFamily: string;\n  fontWeight: number;\n  fontSize: number;\n  textTransform: string;\n  letterSpacing: number;\n  lineHeight: number;\n};\n\nexport type FontWeightToName = typeof WEIGHT_TO_FONT;\n\nexport type FontWeightNum = keyof FontWeightToName;\n\nexport type FontWeightVar = Lowercase<FontWeightToName[keyof FontWeightToName]>;\n\nexport type ShadowName<T extends string> = T extends `shadow${infer Name}`\n  ? Lowercase<Name>\n  : T;\n\nexport type ShadowDefinition = {\n  boxShadow: string;\n  offset: { x: number; y: number };\n  radius: number;\n  opacity: number;\n  color: { hex: string; rgba: string };\n};\n\nexport type ShadowOutput = {\n  elevation: number;\n  shadowOffset: { width: number; height: number };\n  shadowRadius: number;\n  shadowOpacity: number;\n  shadowColor: string;\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA;AAAA;AAAA;AAAA;AAAO,IAAM,OAAO;;;ACApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAM,iBAAiB;AAAA,EACrB,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AACP;AAEO,SAAS,kBAAkB,QAAgB;AAChD,SAAO,eAAe,QAAyB,YAAY;AAC7D;AAEO,SAAS,SAAyD,GAAM;AAC7E,QAAM,QAAQ,CAAC;AAEf,SAAO,OAAO,CAAC,EAAE,QAAQ,CAAC,UAAU;AAClC,UAAM,SAAS,eAAe,MAAM;AACpC,UAAM,OAAO,OAAO,YAAY;AAChC,UAAM,QAAQ,GAAG,MAAM,cAAc;AAAA,EACvC,CAAC;AAED,SAAO;AACT;AAEO,SAAS,aACd,GACA;AACA,QAAM,YAAY,CAAC;AAEnB,SAAO,QAAQ,CAAC,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AAC1C,cAAU,OAAkB,MAAM;AAAA,EACpC,CAAC;AAED,SAAO;AACT;AAEO,SAAS,eACd,GACA;AACA,QAAM,cAAc,CAAC;AAErB,SAAO,QAAQ,CAAC,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AAC1C,gBAAY,OAAkB,GAAG,MAAM;AAAA,EACzC,CAAC;AAED,SAAO;AACT;AAEO,SAAS,eACd,GACA;AACA,QAAM,cAAc,CAAC;AAErB,SAAO,QAAQ,CAAC,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AAC1C,gBAAY,OAAkB,MAAM,aAAa,MAAM;AAAA,EACzD,CAAC;AAED,SAAO;AACT;AAEO,SAAS,kBAEd,GAAM;AACN,QAAM,iBAAiB,CAAC;AAExB,SAAO,QAAQ,CAAC,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AAC1C,mBAAe,OAAkB,MAAM;AAAA,EACzC,CAAC;AAED,SAAO;AACT;AAEA,IAAM,qBAAqB,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,EAAE;AAEjD,SAAS,aAAa,cAAsB;AAEjD,QAAM,YAAY,mBAAmB,OAAO,CAAC,MAAM,SAAS;AAC1D,WAAO,KAAK,IAAI,OAAO,YAAY,IAAI,KAAK,IAAI,OAAO,YAAY,IAC/D,OACA;AAAA,EACN,GAAG,CAAC;AAEJ,SAAO;AACT;AAEO,SAAS,WAGd,GAAM;AACN,QAAM,UAAU,CAAC;AAEjB,SAAO,QAAQ,CAAC,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AAC1C,UAAM,IAAI,IAAI,QAAQ,UAAU,EAAE,EAAE,YAAY;AAEhD,YAAQ,KAAK;AAAA,MACX,WAAW,aAAa,MAAM,MAAM;AAAA,MACpC,cAAc,EAAE,OAAO,MAAM,OAAO,GAAG,QAAQ,MAAM,OAAO,EAAE;AAAA,MAC9D,cAAc,MAAM;AAAA,MACpB,eAAe,MAAM;AAAA,MACrB,aAAa,MAAM,MAAM;AAAA,IAC3B;AAAA,EACF,CAAC;AAED,SAAO;AACT;","names":[]}